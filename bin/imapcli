#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'imapcli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/imapcli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/imapcli now"
  exit 64
end
require 'dotenv'
require 'tty-prompt'
require 'tty-table'
# require 'pp'

Dotenv.load

include GLI::App

program_desc 'Command-line interface for IMAP servers'

version Imapcli::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually
wrap_help_text :tty_only

desc 'Domain name (FQDN) of the IMAP server'
default_value ENV['IMAP_SERVER']
arg_name 'imap.example.com'
flag [:s,:server]

desc 'Log-in name (username/email)'
default_value ENV['IMAP_USER']
arg_name 'user'
flag [:u,:user]

desc 'Log-in password'
# default_value ENV['IMAP_PASS']
arg_name 'password'
flag [:p,:password]

desc 'Prompt for password'
switch [:P, :prompt], negatable: false

desc 'Verbose output (e.g., response values from Ruby''s Net::IMAP)'
switch [:v,:verbose], negatable: false

desc 'Tests if the server is available and log-in succeeds with the credentials'
command :check do |c|
  c.action do |global_options,options,args|
    @command.check ? @prompt.ok('login successful') : @prompt.error('login failed')
  end
end

desc 'Prints information about the server'
command :info do |c|
  c.action do |global_options,options,args|
    @command.info.each { |line| @prompt.say line }
  end
end

desc 'Lists mailboxes (folders)'
command :list do |c|
  c.action do |global_options,options,args|
    @command.list.each { |line| @prompt.say line }
  end
end

desc 'Collects mailbox statistics'
arg_name :mailbox, optional: false, multiple: true
command :examine do |c|
  c.action do |global_options,options,args|
    body = @command.stats(args)
    head = [ 'Mailbox', 'Count', 'Total size', 'Min', 'Q1', 'Median', 'Q3', 'Max' ]
    table = TTY::Table.new(head, body)
    @prompt.say table.render(:unicode, alignments: [:left] + Array.new(7, :right) )
    if body.any? { |line| line[0].start_with? Imapcli::Command.unknown_mailbox_prefix }
      @prompt.warn "#{Imapcli::Command.unknown_mailbox_prefix}unknown mailbox"
    end
  end
end

pre do |global,command,options,args|
  @prompt = TTY::Prompt.new

  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:P] && global[:p]
    raise '-p and -P options do not agree'
  end
  if global[:P]
    global[:p] = @prompt.mask 'Enter password:'
  end
  global[:p] ||= ENV['IMAP_PASS']

  client = Imapcli::Client.new(global[:s], global[:u], global[:p])
  @prompt.say "server: #{global[:s]}"
  @prompt.say "user: #{global[:u]}"
  raise 'invalid server name' unless client.server_valid?
  raise 'invalid user name' unless client.user_valid?
  @prompt.warn 'warning: no password was provided (missing -p/-P option)' unless global[:p]
  raise 'unable to connect to server' unless client.connection
  @command = Imapcli::Command.new(client)

  true
end

post do |global,command,options,args|
  @client.logout if @client
  if global[:v]
    @prompt.say "\n>>> --verbose switch on, listing server responses <<<"
    @client.responses.each do |response|
      @prompt.say response
    end
  end
end

on_error do |exception|
  @client.logout if @client
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
