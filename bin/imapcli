#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'imapcli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/imapcli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/imapcli now"
  exit 64
end
require 'dotenv'
require 'tty-prompt'
require 'pp'

Dotenv.load

include GLI::App

program_desc 'Command-line interface for IMAP servers'

version Imapcli::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually
wrap_help_text :tty_only

desc 'Domain name (FQDN) of the IMAP server'
default_value ENV['IMAP_SERVER']
arg_name 'imap.example.com'
flag [:s,:server]

desc 'Log-in name (username/email)'
default_value ENV['IMAP_USER']
arg_name 'user'
flag [:u,:user]

desc 'Log-in password'
default_value ENV['IMAP_PASS']
arg_name 'password'
flag [:p,:password]

desc 'Prompt for password'
switch [:P, :prompt], negatable: false

desc 'Verbose output (e.g., response values from Ruby''s Net::IMAP)'
switch [:v,:verbose], negatable: false

desc 'Tests if the server is available and log-in succeeds with the credentials'
command :check do |c|
  c.action do |global_options,options,args|
    if @client.login
      @prompt.say 'login successful'
    else
      @prompt.say 'login failed'
    end
  end
end

desc 'Prints information about the server'
command :info do |c|
  c.action do |global_options,options,args|
    if @client.login
      @prompt.say "greeting: #{@client.greeting}"
      @prompt.say "capability: #{@client.capability.join(' ')}"
      @prompt.say "hierarchy separator: #{@client.separator}"
      if @client.supports_quota
        usage = Filesize.from(@client.quota[0] + ' kB').pretty
        available = Filesize.from(@client.quota[1] + ' kB').pretty
        @prompt.say "quota: #{usage} used, #{available} available (#{@client.quota[2].round(1)}%)"
      end
    else
      raise 'unable to log into server'
    end
  end
end

# desc 'Logs into the server with telnet/OpenSSL'
# command :login do |c|
#   c.action do |global_options,options,args|
#     if @client.login
#       system "openssl s_client -crlf -connect #{global_options[:s]}:993"
#       #    input: "A login #{global_options[:u]} #{global_options[:p]}", pty: true
#     else
#       raise 'unable to log into server'
#     end
#   end
# end

def traverse_mailbox_tree(mailbox, depth = 0)
  if mailbox.has_children?
    indent = ('  ' * depth) || ''
    mailbox.children.each do |child|
      @prompt.say indent + '- ' + child.name
      traverse_mailbox_tree child, depth + 1
    end
  end
end

desc 'Lists mailboxes (folders)'
command :list do |c|
  c.action do |global_options,options,args|
    if @client.login
      @prompt.say "mailboxes (folders) tree:"
      traverse_mailbox_tree @client.mailbox_tree
    end
  end
end

desc 'Examines mailboxes'
arg_name :mailbox, optional: false, multiple: true
command :examine do |c|
  c.action do |global_options,options,args|
    if @client.login
      @prompt.say "Examine:\n" + 'Total'.rjust(6) + ' '  + 'Unseen'.rjust(6) + ' Name'
      args.each do |mailbox|
        data = @client.examine(mailbox)
        pp data
        # @prompt.say "#{'%6d' % data[:total]} #{'%6d' % data[:unseen]} #{mailbox} #{size}"
      end
      @prompt.say
    end
  end
end

pre do |global,command,options,args|
  @prompt = TTY::Prompt.new

  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:P] && global[:p]
    puts 'warning: -p option is set in the IMAP_PASS environment variable' if ENV['IMAP_PASS']
    raise '-p and -P options do not agree'
  end
  if global[:P]
    global[:p] = @prompt.mask 'Enter password:'
  end

  @client = Imapcli::Client.new(global[:s], global[:u], global[:p])
  @prompt.say "server: #{global[:s]}"
  @prompt.say "user: #{global[:u]}"
  raise 'invalid server name' unless @client.server_valid?
  raise 'invalid user name' unless @client.user_valid?
  raise 'unable to connect to server' unless @client.connection

  true
end

post do |global,command,options,args|
  @client.logout if @client
  if global[:v]
    @prompt.say "\n>>> --verbose switch on, listing server responses <<<"
    @client.responses.each do |response|
      @prompt.say response
    end
  end
end

on_error do |exception|
  @client.logout if @client
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
