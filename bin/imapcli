#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'imapcli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/imapcli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/imapcli now"
  exit 64
end
require 'dotenv'
require 'tty-prompt'
require 'tty-table'
require 'tty-progressbar'
require 'csv'
# require 'pry'
# require 'pp'

Dotenv.load

include GLI::App

program_desc 'Command-line interface for IMAP servers'

version Imapcli::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually
wrap_help_text :tty_only

desc 'Domain name (FQDN) of the IMAP server'
default_value ENV['IMAP_SERVER']
arg_name 'imap.example.com'
flag [:s,:server]

desc 'Log-in name (username/email)'
default_value ENV['IMAP_USER']
arg_name 'user'
flag [:u,:user]

desc 'Log-in password'
# default_value ENV['IMAP_PASS']
arg_name 'password'
flag [:p,:password]

desc 'Prompt for password'
switch [:P, :prompt], negatable: false

desc 'Verbose output (e.g., response values from Ruby''s Net::IMAP)'
switch [:v,:verbose], negatable: false

desc 'Tests if the server is available and log-in succeeds with the credentials'
command :check do |c|
  c.action do |global_options,options,args|
    @command.check ? @prompt.ok('login successful') : @prompt.error('login failed')
  end
end

desc 'Prints information about the server'
command :info do |c|
  c.action do |global_options,options,args|
    @command.info.each { |line| @prompt.say line }
  end
end

desc 'Lists mailboxes (folders)'
command :list do |c|
  c.action do |global_options,options,args|
    @command.list.each { |line| @prompt.say line }
  end
end

desc 'Collects mailbox statistics'
arg_name :mailbox, optional: false, multiple: true
command :stats do |c|
  c.switch [:r, :recurse], desc: 'Recurse into sub mailboxes', negatable: false
  c.switch [:R, :no_recurse], desc: 'Do not recurse into sub mailboxes', negatable: false
  c.flag [:o, :order], desc: 'Order', arg_name: 'property',
    must_match: %w(count total_size min_size q1 median_size q3 max_size)
  c.switch [:O, :reverse], desc: 'Reverse sort order (largest first)', negatable: false
  c.switch [:csv], desc: 'Output comma-separated values (CSV)'

  c.action do |global_options,options,args|
    command_options = {}
    raise 'incompatible options -r/--recurse and -R/--no_recurse' if options[:r] && options[:R]
    if options[:r]
      if args.empty?
        @prompt.warn 'warning: superfluous -r/--recurse option; will recurse from root by default'
      else
        command_options[:depth] = -1
      end
    elsif options[:R]
      if args.empty?
        command_options[:depth] = 0
      else
        @prompt.warn 'warning: superfluous -R/--no_recurse option; will not recurse from non-root mailbox by default'
      end
    end

    progress_bar = nil
    body = @command.stats(args, command_options) do |n|
      if progress_bar
        progress_bar.advance
      else
        progress_bar = TTY::ProgressBar.new(
          "collecting stats... :percent (:eta remaining)",
          total: n, clear: true)
      end
    end

    head = [ 'Mailbox', 'Count', 'Total size', 'Min', 'Q1', 'Median', 'Q3', 'Max' ]
    if options[:csv]
      @prompt.warn 'notice: messages sizes in CSV output are in kiB (1024 bytes)'
      @prompt.say head.to_csv
      last_mailbox_line = body.length == 1 ? -1 : -2 # skip grand total if present
      body[0..last_mailbox_line].each { |row| @prompt.say row.to_csv }
    else
      nice_body = body.map do |row|
        row[0..1] + row[2..-1].map { |cell| format_kib(cell) }
      end
      table = TTY::Table.new(head, nice_body)
      @prompt.say table.render(:unicode, alignments: [:left] + Array.new(7, :right) )
      if body.any? { |line| line[0].start_with? Imapcli::Command.unknown_mailbox_prefix }
        @prompt.warn "#{Imapcli::Command.unknown_mailbox_prefix}unknown mailbox"
      end
    end
  end
end


def format_kib(kib)
  if kib
    kib.to_s.reverse.gsub(/...(?=.)/,'\&,').reverse + ' kiB'.freeze
  else
    'NA'
  end
end


pre do |global,command,options,args|
  @prompt = TTY::Prompt.new

  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:s].nil? || global[:s].empty?
    raise 'missing server name (use -s option or set IMAP_SERVER environment variable)'
  end
  if global[:P] && global[:p]
    raise '-p and -P options do not agree'
  end
  if global[:P]
    global[:p] = @prompt.mask 'Enter password:'
  end
  global[:p] ||= ENV['IMAP_PASS']

  client = Imapcli::Client.new(global[:s], global[:u], global[:p])
  @prompt.say "server: #{global[:s]}"
  @prompt.say "user: #{global[:u]}"
  raise 'invalid server name' unless client.server_valid?
  raise 'invalid user name' unless client.user_valid?
  @prompt.warn 'warning: no password was provided (missing -p/-P option)' unless global[:p]
  raise 'unable to connect to server' unless client.connection
  @command = Imapcli::Command.new(client)

  true
end

post do |global,command,options,args|
  @client.logout if @client
  if global[:v]
    @prompt.say "\n>>> --verbose switch on, listing server responses <<<"
    @client.responses.each do |response|
      @prompt.say response
    end
  end
end

on_error do |exception|
  @client.logout if @client
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
